pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "minionz/calit-batch:latest"
        MEETING_CRONJOB = "calit-meeting"
        TASK_CRONJOB = "calit-task"
        SPRINT_CRONJOB = "calit-sprint"
        DISCORD_WEBHOOK = credentials("DISCORD_WEBHOOK")
    }

    stages {
        stage('Build') {
            steps {
                echo "Add Permission"
                sh 'chmod +x /var/lib/jenkins/workspace/minionz_calit_backend/backend/batch/gradlew'
                echo "Gradle Build"
                sh '''
                    cd /var/lib/jenkins/workspace/minionz_calit_backend/backend/batch
                    ./gradlew bootJar
                '''
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'minionztest', usernameVariable: 'DOCKERID', passwordVariable: 'DOCKERPW')]) {
                        echo "Docker Build"
                        sh "docker build --tag minionz/calit-batch:1.${BUILD_ID} ./backend/batch"

                        echo "Docker Login"
                        sh "docker login -u $DOCKERID -p $DOCKERPW"

                        echo "Docker Push"
                        sh "docker push minionz/calit-batch:1.${BUILD_ID}"
                    }
                }
            }
        }

        stage('Blue-Green Deployment') {
            steps {
                script {
                    sshPublisher(
                        continueOnError: false,
                        failOnError: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: 'jenkins',
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: 'cicd/k8s-batch.yml',
                                        remoteDirectory: '/minionz/',
                                        execCommand: '''
                                            #이전 크론잡 삭제
                                            kubectl delete cronjob "$MEETING_CRONJOB"
                                            kubectl delete deployment "$TASK_CRONJOB"
                                            kubectl delete service "$SPRINT_CRONJOB"

                                            # 새 환경에 맞는 파일을 적용
                                            sed -i "s/latest/1.${BUILD_ID}/g" /home/master/minionz/cicd/k8s-batch.yml
                                            kubectl apply -f /home/master/minionz/cicd/k8s-batch.yml
                                        '''
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }

    post {
        success {
            discordSend description: "배포 성공",
            webhookURL: "${env.DISCORD_WEBHOOK}"
        }
        failure {
            discordSend description: "배포 실패",
            webhookURL: "${env.DISCORD_WEBHOOK}"
        }
    }
}
