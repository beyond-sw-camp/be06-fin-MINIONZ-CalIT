pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "minionz/calit-backend:latest"
        PREV_DEPLOYMENT = ""
        PREV_STICKY_DEPLOYMENT = ""
        PREV_BACKEND_SERVICE = ""
        PREV_BACKEND_STICKY_SERVICE = ""
        PREV_FRONTEND_SERVICE = ""
        PREV_INGRESS = ""
        DISCORD_WEBHOOK = credentials("DISCORD_WEBHOOK")
    }

    stages {
         stage('Build') {
            steps {
                echo "Add Permission"
                sh 'chmod +x /var/lib/jenkins/workspace/minionz_calit_backend/backend/api-server/gradlew'
                echo "Gradle Build"
                sh '''
                    cd /var/lib/jenkins/workspace/minionz_calit_backend/backend/api-server
                    ./gradlew bootJar
                '''
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: 'minionztest', usernameVariable: 'DOCKERID', passwordVariable: 'DOCKERPW')
                    ]) {
                        echo "Docker Build"
                        sh "docker build --tag minionz/calit-backend:2.${BUILD_ID} ./backend/api-server"

                        echo "Docker Login"
                        sh "docker login -u $DOCKERID -p $DOCKERPW"

                        echo "Docker Push"
                        sh "docker push minionz/calit-backend:2.${BUILD_ID}"
                    }
                }
            }
        }

        stage('SSH Transfer and Kubernetes Deployment') {
            steps {
                script {
                    sshPublisher(
                        continueOnError: false,
                        failOnError: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: 'jenkins',
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: 'cicd/k8s-backend.yml cicd/k8s-ingress.yml',
                                        remoteDirectory: '/minionz/',
                                        execCommand: "sed -i 's/latest/2.${BUILD_ID}/g; s/vname/v${BUILD_ID}/g' /home/master/minionz/cicd/k8s-backend.yml"
                                    ),
                                    sshTransfer(
                                        execCommand: '''
                                            PREV_DEPLOYMENT=$(kubectl get deployment | grep calit-backend-v | awk '{print $1}' | sort | head -1)
                                            PREV_STICKY_DEPLOYMENT=$(kubectl get deployment | grep calit-backend-sticky-v | awk '{print $1}' | sort | head -1)
                                            PREV_BACKEND_SERVICE=$(kubectl get service | grep backend-svc-v | awk '{print $1}' | sort | head -1)
                                            PREV_BACKEND_STICKY_SERVICE=$(kubectl get service | grep backend-svc-sticky-v | awk '{print $1}' | sort | head -1)
                                            PREV_FRONTEND_SERVICE=$(kubectl get service | grep frontend-svc-v | awk '{print $1}' | sort | head -1)
                                            PREV_INGRESS=$(kubectl get ingress | grep ingress-v | awk '{print $1}' | sort | head -1)

                                            NEXT_VERSION=$(kubectl get ingress | grep ingress-v | awk '{print $1}' | sort | head -1 | sed 's/[^0-9]*//g')
                                            NEXT_VERSION=$(( NEXT_VERSION ? NEXT_VERSION + 1 : 1 ))

                                            sed -i "s/iname/v${NEXT_VERSION}/g; s/frontend-svc-vname/${PREV_FRONTEND_SERVICE}/g; s/vname/v${BUILD_ID}/g" /home/master/minionz/cicd/k8s-ingress.yml

                                            kubectl apply -f /home/master/minionz/cicd/k8s-backend.yml
                                            kubectl apply -f /home/master/minionz/cicd/k8s-ingress.yml

                                            sleep 40
                                            kubectl patch ingress ingress-v${NEXT_VERSION} -p '{"metadata":{"annotations":{"nginx.ingress.kubernetes.io/canary-weight":"50"}}}'

                                            sleep 40
                                            kubectl patch ingress ingress-v${NEXT_VERSION} -p '{"metadata":{"annotations":{"nginx.ingress.kubernetes.io/canary-weight":"100"}}}'
                                            kubectl patch ingress ingress-v${NEXT_VERSION} -p '{"metadata":{"annotations":{"nginx.ingress.kubernetes.io/canary":"false"}}}'

                                            if [ -n "$PREV_DEPLOYMENT" ]; then
                                                kubectl delete deployment "$PREV_DEPLOYMENT"
                                                kubectl delete deployment "$PREV_STICKY_DEPLOYMENT"
                                                kubectl delete service "$PREV_BACKEND_SERVICE"
                                                kubectl delete service "$PREV_BACKEND_STICKY_SERVICE"
                                                kubectl delete ingress "$PREV_INGRESS"
                                            else
                                                echo "변경 사항 없음"
                                            fi
                                            '''
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }
    post {
        success {
            discordSend description: """
            제목 : "${currentBuild.displayName} 번째 백엔드 배포에 성공했습니다."
            결과 : ${currentBuild.result}
            실행 시간 : ${currentBuild.duration / 1000}s
            """,
            link: env.BUILD_URL, result: currentBuild.currentResult,
            title: "${env.JOB_NAME} : ${currentBuild.displayName} 성공",
            webhookURL: "${env.DISCORD_WEBHOOK}"
        }
        failure {
            discordSend description: """
            제목 : "${currentBuild.displayName} 번째 백엔드 배포에 실패했습니다."
            결과 : ${currentBuild.result}
            실행 시간 : ${currentBuild.duration / 1000}s
            """,
            link: env.BUILD_URL, result: currentBuild.currentResult,
            title: "${env.JOB_NAME} : ${currentBuild.displayName} 실패",
            webhookURL: "${env.DISCORD_WEBHOOK}"
        }
    }
}